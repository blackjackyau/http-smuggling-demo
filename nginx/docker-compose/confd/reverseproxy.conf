upstream application {
  server 10.0.2.2:9090;  # virtual box host ip, change to your application url
  #server 10.0.2.2:9091;  # virtual box host ip
  keepalive 16; # very import to configure upstream as keepalive
}

# simulate vulnerable header normalization, convert X_Blax_${object}* to ${object}, replaced by LUA
#map $http_x_blax_transfer_encoding $transfer_encoding {
#    default "";
#  ~.+$ $http_x_blax_transfer_encoding;  # Regular expression to match any value
#}
#proxy_set_header X-Blax-Transfer-Encoding "";
#proxy_set_header Transfer-Encoding $transfer_encoding;

server {

    listen       80;
    listen  [::]:80;
    server_name  docker.vm;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    ignore_invalid_headers off; # allows invalid header to allow header normalization

    location  / {

      set $te_var '';
      set $host_var '';
      set $cl_var '';

      # header_filter_by_lua_block will not overwrite headers to proxy  
      access_by_lua_block {
       -- to print out export methods
       -- for key,value in pairs(ngx.req) do
       --   ngx.log(ngx.STDERR, "found method " .. key)
       -- end
      
        for key, value in pairs(ngx.req.get_headers()) do
          local normalized_key = key:gsub("_", "-")
          if normalized_key ~= key then
            ngx.log(ngx.STDERR, "original: ", key, " | normalised: ", normalized_key)
            ngx.req.clear_header(key)
            ngx.req.set_header(normalized_key, value)
          end
        end

        -- workaround to set generic header from lua, as by nginx lua module will prevent it.
        for key, value in pairs(ngx.req.get_headers()) do
          ngx.log(ngx.STDERR, "key: ", key, " | value: ", value)
          if key:lower() == "transfer-encoding" then
            ngx.var.te_var = value
          end
          if key:lower() == "host" then
            ngx.var.host_var = value
          end
          if key:lower() == "content-length" then
            ngx.var.cl_var = value
          end
        end
      }

      proxy_set_header Transfer-Encoding $te_var;
      proxy_set_header Connection "";
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header Content-Length $cl_var;
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_pass  http://application;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

}